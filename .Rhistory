# Overview
Monitoring the distribution and change in land cover types can help us understand the impacts of phenomena like climate change, natural disasters, deforestation, and urbanization. Determining land cover types over large areas is a major application of remote sensing because we are able to distinguish different materials based on their spectral reflectance.
Classifying remotely sensed imagery into landcover classes enables us to understand the distribution and change in landcover types over large areas. There are many approaches for performing landcover classification -- *supervised* approaches use training data labeled by the user, whereas *unsupervised* approaches use algorithms to create groups which are identified by the user afterward.\
credit: this lab is based on a materials developed by Chris Kibler.
# load necessary libraries
library(sf)
library(terra)
library(here)
library(dplyr)
library(rpart)
library(rpart.plot)
library(tmap)
# clearing the environment for a fresh start
rm(list = ls())
# load necessary libraries
library(sf)
library(terra)
library(here)
library(dplyr)
library(rpart)
library(rpart.plot)
library(tmap)
# clearing the environment for a fresh start
rm(list = ls())
filelist <- list,files("/data/landsat-data")
filelist <- list.files("/data/landsat-data")
# Task
In this lab, we are using a form of supervised classification, a *decision tree classifier*. [Decision trees](https://medium.com/@ml.at.berkeley/machine-learning-crash-course-part-5-decision-trees-and-ensemble-models-dcc5a36af8cd) classify pixels using a series of conditions based on values in spectral bands. These conditions (or decisions) are developed based on training data. In this lab we will create a land cover classification for southern Santa Barbara County based on multi-spectral imagery and data on the location of 4 land cover types:
# list the files for eahc band
filelist <- list.files("/data/landsat-data", full.names = TRUE)
# read in and store raster stack
landsat_20070925 <- rast(filelist)
# list the files for eahc band
filelist <- list.files(here("/data/landsat-data"), full.names = TRUE)
# read in and store raster stack
landsat_20070925 <- rast(filelist)
# list the files for eahc band
filelist <- list.files(here("data/landsat-data"), full.names = TRUE)
# read in and store raster stack
landsat_20070925 <- rast(filelist)
# list the files for eahc band
filelist <- list.files(here("data/landsat-data"), full.names = TRUE)
# read in and store raster stack
landsat_20070925 <- rast(filelist)
-   green vegetation\
## Summary
# list the files for eahc band
filelist <- list.files(here("data/landsat-data"), full.names = TRUE)
# read in and store raster stack
landsat_20070925 <- rast(filelist)
# update layer names to match the bands
names(landsat_20070925) <- c("blue", "green", "red", "NIR", "SWIR1", "SWIR2")
# list the files for eahc band
filelist <- list.files(here("data/landsat-data"), full.names = TRUE)
# read in and store raster stack
landsat_20070925 <- rast(filelist)
# update layer names to match the bands
names(landsat_20070925) <- c("blue", "green", "red", "NIR", "SWIR1", "SWIR2")
# plot true color image
plotRGB(landsat_20070925, r = 3, g = 2, b = 1, stretch = "lin")
-   load and process Landsat scene\
# read in shapefile of southern SB county
study_area <- st_read(here("data/SB_county_south.shp"))
# read in shapefile of southern SB county
study_area <- st_read(here("data/SB_county_south.shp"))
# reproject to match CRS of the Landsat data
study_area <- st_transform(study_area, crs = crs(landsat_20070925))
# crop Landsat to the extent of SB county
landsat_cropped <- crop(landsat_20070925, study_area)
# crop Landsat to the extent of SB county
landsat_cropped <- crop(landsat_20070925, study_area)
# mask the raster
landsat_masked <- mask(landsat_cropped, study_area)
# crop Landsat to the extent of SB county
landsat_cropped <- crop(landsat_20070925, study_area)
# mask the raster
landsat_masked <- mask(landsat_cropped, study_area)
# clean up environment by removing unecessary object
rm(landsat_20070925, study_area, landsat_cropped)
# reclassify erroneous values as NA
rcl <- matrix(c(-Inf, 7273, NA,
43636, Inf, NA), ncol = 3, byrow = TRUE)
landsat <- classify(landsat_masked, rcl = rcl
# adjust values according to scale
landsat <- (landsat * 0.0000275 - 0.2) * 100
# reclassify erroneous values as NA
rcl <- matrix(c(-Inf, 7273, NA,
43636, Inf, NA), ncol = 3, byrow = TRUE)
landsat <- classify(landsat_masked, rcl = rcl)
# adjust values according to scale
landsat <- (landsat * 0.0000275 - 0.2) * 100
# reclassify erroneous values as NA
rcl <- matrix(c(-Inf, 7273, NA,
43636, Inf, NA), ncol = 3, byrow = TRUE)
landsat <- classify(landsat_masked, rcl = rcl)
# adjust values according to scale
landsat <- (landsat * 0.0000275 - 0.2) * 100
# plot true color image to verify results
plotRGB(landsat, r = 3, g = 2, b = 1, stretch = "lin")
# confirm that the values are from 0 to 100
summary(landsat)
# read in and transform CRS of training data
training_data <- st_read(here("data/trainingdata.shp")) %>%
st_transform(., crs = crs(landsat))
# read in and transform CRS of training data
training_data <- st_read(here("data/trainingdata.shp")) %>%
st_transform(., crs = crs(landsat))
# extract reflectance values of training area
training_data_vals <- extract(landsat, training_data, df = TRUE)
# read in and transform CRS of training data
training_data <- st_read(here("data/trainingdata.shp")) %>%
st_transform(., crs = crs(landsat))
# extract reflectance values of training area
training_data_vals <- extract(landsat, training_data, df = TRUE)
# convert training data to a dataframe
training_data_df <- training_data %>%
st_drop_geometry
# read in and transform CRS of training data
training_data <- st_read(here("data/trainingdata.shp")) %>%
st_transform(., crs = crs(landsat))
# extract reflectance values of training area
training_data_vals <- extract(landsat, training_data, df = TRUE)
# convert training data to a dataframe
training_data_df <- training_data %>%
st_drop_geometry()
# read in and transform CRS of training data
training_data <- st_read(here("data/trainingdata.shp")) %>%
st_transform(., crs = crs(landsat))
# extract reflectance values of training area
training_data_vals <- extract(landsat, training_data, df = TRUE)
# convert training data to a dataframe
training_data_df <- training_data %>%
st_drop_geometry()
# join training data attributes with reflectance values
sb_training_data <- left_join(training_data_vals, training_data_df,
by = c("ID" = "id")) %>%
mutate(type = as.factor(type)) # convert Landvoer to a factor
# create model formula
sb_formula <- type ~ red + green + NIR + SWIR1 + SWIR2
# train the decision tree
sb_tree <- rpart(formula = sb_formula,
data = sb_training_data,
method = "class",
na.action = na.omit)
# visualize decision tree
prp(sb_tree)
# classify the image based on decision tree results
sb_classified <- predict(landsat, SB_tree, type = "class", na.rm = TRUE)
# create model formula
sb_formula <- type ~ red + green + NIR + SWIR1 + SWIR2
# train the decision tree
sb_tree <- rpart(formula = sb_formula,
data = sb_training_data,
method = "class",
na.action = na.omit)
# visualize decision tree
prp(sb_tree)
# classify the image based on decision tree results
sb_classified <- predict(landsat, sb_tree, type = "class", na.rm = TRUE)
# classify the image based on decision tree results
sb_classified <- predict(landsat, sb_tree, type = "class", na.rm = TRUE)
# inspect level to undersstand the order of prediction classes
levels(sb_training_data$type)
# plot results
tm_shape(sb_class) +
tm_raster(col.scale = tm_scale_categorical(values = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE")),
col.legend = tm_legend(labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Landcover type")) +
tm_layout(legend.position = c("left", "bottom"))
# classify the image based on decision tree results
sb_class <- predict(landsat, sb_tree, type = "class", na.rm = TRUE)
# inspect level to undersstand the order of prediction classes
levels(sb_training_data$type)
# plot results
tm_shape(sb_class) +
tm_raster(col.scale = tm_scale_categorical(values = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE")),
col.legend = tm_legend(labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Landcover type")) +
tm_layout(legend.position = c("left", "bottom"))
# plot results
tm_shape(sb_class) +
tm_raster(col.scale = tm_scale_categorical(values = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE")),
col.legend = tm_legend(labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Landcover type")) +
tm_layout(legend.position = c("left", "bottom"))
# plot results
tm_shape(sb_class) +
tm_raster(col.scale = tm_scale_categorical(values = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE")),
col.legend = tm_legend(labels = c("green_vegetation", "soil_dead_grass", "urban", "water"),
title = "Landcover type")) +
tm_layout(legend.position = c("left", "bottom"))
# plot results
tm_shape(sb_class) +
tm_raster(style = "cat", palette = c("green_vegetation" = "#8DB580",
"soil_dead_grass" = "#F2DDA4",
"urban" = "#7E8987",
"water" = "#6A8EAE")) +
tm_layout(legend.title = "Landcover type",
legend.text = c("Green Vegetation", "Soil/Dry Grass", "Urban", "Water"))
# plot results
tm_shape(sb_class) +
tm_raster(col.scale = tm_scale_categorical(values = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE")),
col.legend = tm_legend(labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Landcover type")) +
tm_layout(legend.position = c("left", "bottom"))
# create model formula
sb_formula <- type ~ red + green + NIR + SWIR1 + SWIR2
# train the decision tree
sb_tree <- rpart(formula = sb_formula,
data = sb_training_data,
method = "class",
na.action = na.omit)
# visualize decision tree
prp(sb_tree)
# classify the image based on decision tree results
sb_class <- predict(landsat, sb_tree, type = "class", na.rm = TRUE)
# inspect level to undersstand the order of prediction classes
levels(sb_training_data$type)
# plot results
tm_shape(sb_class) +
tm_raster(col.scale = tm_scale_categorical(values = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE")),
col.legend = tm_legend(labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Landcover type")) +
tm_layout(legend.position = c("left", "bottom"))
# plot results
tm_shape(sb_class) +
tm_raster(col.scale = tm_scale_categorical(values = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE")),
col.legend = tm_legend(labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Landcover type")) +
tm_layout(legend.position = c("left", "bottom"))
# load necessary libraries
library(sf)
library(terra)
library(here)
library(dplyr)
library(rpart)
library(rpart.plot)
library(tmap)
# clearing the environment for a fresh start
rm(list = ls())
# load necessary libraries
library(sf)
library(terra)
library(here)
library(dplyr)
library(rpart)
library(rpart.plot)
library(tmap)
# clearing the environment for a fresh start
rm(list = ls())
# list the files for eahc band
filelist <- list.files(here("data/landsat-data"), full.names = TRUE)
# read in and store raster stack
landsat_20070925 <- rast(filelist)
# update layer names to match the bands
names(landsat_20070925) <- c("blue", "green", "red", "NIR", "SWIR1", "SWIR2")
# plot true color image
plotRGB(landsat_20070925, r = 3, g = 2, b = 1, stretch = "lin")
# read in shapefile of southern SB county
study_area <- st_read(here("data/SB_county_south.shp"))
# reproject to match CRS of the Landsat data
study_area <- st_transform(study_area, crs = crs(landsat_20070925))
# read in shapefile of southern SB county
study_area <- st_read(here("data/SB_county_south.shp"), quiet = TRUE)
# reproject to match CRS of the Landsat data
study_area <- st_transform(study_area, crs = crs(landsat_20070925))
# reclassify erroneous values as NA
rcl <- matrix(c(-Inf, 7273, NA,
43636, Inf, NA), ncol = 3, byrow = TRUE)
landsat <- classify(landsat_masked, rcl = rcl)
# crop Landsat to the extent of SB county
landsat_cropped <- crop(landsat_20070925, study_area)
# mask the raster
landsat_masked <- mask(landsat_cropped, study_area)
# clean up environment by removing unecessary object
rm(landsat_20070925, study_area, landsat_cropped)
# reclassify erroneous values as NA
rcl <- matrix(c(-Inf, 7273, NA,
43636, Inf, NA), ncol = 3, byrow = TRUE)
landsat <- classify(landsat_masked, rcl = rcl)
# adjust values according to scale
landsat <- (landsat * 0.0000275 - 0.2) * 100
# plot true color image to verify results
plotRGB(landsat, r = 3, g = 2, b = 1, stretch = "lin")
# confirm that the values are from 0 to 100
summary(landsat)
# read in and transform CRS of training data
training_data <- st_read(here("data/trainingdata.shp")) %>%
st_transform(., crs = crs(landsat))
# extract reflectance values of training area
training_data_vals <- extract(landsat, training_data, df = TRUE)
# convert training data to a dataframe
training_data_df <- training_data %>%
st_drop_geometry()
# join training data attributes with reflectance values
sb_training_data <- left_join(training_data_vals, training_data_df,
by = c("ID" = "id")) %>%
mutate(type = as.factor(type)) # convert Landvoer to a factor
# read in and transform CRS of training data
training_data <- st_read(here("data/trainingdata.shp"), quiet = TRUE) %>%
st_transform(., crs = crs(landsat))
# extract reflectance values of training area
training_data_vals <- extract(landsat, training_data, df = TRUE)
# convert training data to a dataframe
training_data_df <- training_data %>%
st_drop_geometry()
# join training data attributes with reflectance values
sb_training_data <- left_join(training_data_vals, training_data_df,
by = c("ID" = "id")) %>%
mutate(type = as.factor(type)) # convert Landvoer to a factor
# create model formula
sb_formula <- type ~ red + green + NIR + SWIR1 + SWIR2
# train the decision tree
sb_tree <- rpart(formula = sb_formula,
data = sb_training_data,
method = "class",
na.action = na.omit)
# visualize decision tree
prp(sb_tree)
# classify the image based on decision tree results
sb_class <- predict(landsat, sb_tree, type = "class", na.rm = TRUE)
# inspect level to undersstand the order of prediction classes
levels(sb_training_data$type)
# plot results
tm_shape(sb_class) +
tm_raster(col.scale = tm_scale_categorical(values = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE")),
col.legend = tm_legend(labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Landcover type")) +
tm_layout(legend.position = c("left", "bottom"))
# classify the image based on decision tree results
sb_class <- predict(landsat, sb_tree, type = "class", na.rm = TRUE)
# inspect level to undersstand the order of prediction classes
levels(sb_training_data$type)
library(tmap)
# Assuming 'raster_data' is your raster layer
tm_shape(sb_class) +
tm_raster(style = "cat", palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE")) +
tm_layout(legend.title = "Landcover type",
legend.text = c("green vegetation", "soil/dead grass", "urban", "water"))
library(tmap)
# Assuming 'raster_data' is your raster layer
tm_shape(sb_class) +
tm_raster(style = "cat", palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE")) +
tm_layout(legend.title = "Landcover type",
legend.labels = c("green vegetation", "soil/dead grass", "urban", "water"))
tm_shape(sb_class) +
tm_raster(style = "cat", palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE")) +
tm_layout(legend.title = "Landcover type",
legend.labels = c("green vegetation", "soil/dead grass", "urban", "water"))
# plot results
tm_shape(sb_class) +
tm_raster(col.scale = tm_scale_categorical(values = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE")),
col.legend = tm_legend(labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Landcover type")) +
tm_layout(legend.position = c("left", "bottom"))
library(tmap)
tm_shape(sb_class) +
tm_raster(style = "cat", palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE")) +
tm_layout(legend.title = "Landcover type",
legend.labels = c("green vegetation", "soil/dead grass", "urban", "water"))
# plot results
tm_shape(sb_class) +
tm_raster(col.scale = tm_scale_categorical(values = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE")),
col.legend = tm_legend(labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Landcover type")) +
tm_layout(legend.position = c("left", "bottom"))
# plot results
tm_shape(sb_class) +
tm_raster(col.scale = tm_scale_categorical(values = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE")),
col.legend = tm_legend(labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Landcover type")) +
tm_layout(legend.position = c("left", "bottom"))
tm_shape(sb_class) +
tm_raster(palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE"))
# Assuming you have a raster object called 'raster_data'
tm_shape(raster_data) +
tm_raster(
palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE"),
labels = c("green vegetation", "soil/dead grass", "urban", "water")
) +
tm_layout(legend.title = "Landcover type")
# Assuming you have a raster object called 'raster_data'
tm_shape(sb_class) +
tm_raster(
palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE"),
labels = c("green vegetation", "soil/dead grass", "urban", "water")
) +
tm_layout(legend.title = "Landcover type")
# Assuming you have a raster object called 'raster_data'
tm_shape(sb_class) +
tm_raster(
palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE"),
labels = c("green vegetation", "soil/dead grass", "urban", "water")
) +
tm_layout(legend.title = "Land type")
# Assuming you have a raster object called 'raster_data'
tm_shape(sb_class) +
tm_raster(
palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE"),
labels = c("green vegetation", "soil/dead grass", "urban", "water")
)
# plot results
tm_shape(sb_class) +
tm_raster(
palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE"),
labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Test"
)
# plot results
tm_shape(sb_class) +
tm_raster(
palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE"),
labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Classification"
)
# plot results
tm_shape(sb_class) +
tm_raster(
palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE"),
labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Classification"
) +
tm_layout(
legend.position = c("left", "bottom")
)
# plot results
tm_shape(sb_class) +
tm_raster(
palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE"),
labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Classification"
) +
tm_layout(
legend.position = c("left", "bottom"),
title = "Santa Barbara Land Classification"
)
# plot results
tm_shape(sb_class) +
tm_raster(
palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE"),
labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Classification"
) +
tm_layout(
legend.position = c("left", "bottom"),
title = "Santa Barbara Land Classification",
title.position = c("left", "top")
)
# plot results
tm_shape(sb_class) +
tm_raster(
palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE"),
labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Classification"
) +
tm_layout(
legend.position = c("left", "bottom"),
title = "Santa Barbara Land Classification",
title.position = c("right", "top")
)
# plot results
tm_shape(sb_class) +
tm_raster(
palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE"),
labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Classification"
) +
tm_layout(
legend.position = c("left", "bottom"),
title = "Santa Barbara Land Classification",
title.position = c("right", "top"),
title.size = 5
)
# plot results
tm_shape(sb_class) +
tm_raster(
palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE"),
labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Classification"
) +
tm_layout(
legend.position = c("left", "bottom"),
title = "Santa Barbara Land Classification",
title.position = c("right", "top"),
title.size = 2
)
# plot results
tm_shape(sb_class) +
tm_raster(
palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE"),
labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Classification"
) +
tm_layout(
legend.position = c("left", "bottom"),
title = "Santa Barbara Land Classification",
title.position = c("right", "top"),
title.size = 1
)
